{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":"<p>Welcome to nubbekg docs.</p> <p>Here you can find all the information about how the knowledge graph was created, the underlaying source database and how you may query it.</p>"},{"location":"dataset/","title":"Dataset statistics","text":"triples 210849 entities 2455 object properties 7 data properties 55 classes 12 <p>Triples: The data is stored as RDF triples. A triple consists of subject, predicate and object.</p> <p>Entities: In this context, an entity is a chemical compound.</p> <p>Object properties: Are used to connect classes. nubbe:hasBioactivity is an example for an object property.</p> <p>Data properties: Are used to add attributes to classes. nubbe:tpsa is an example for a data property.</p> <p>Classes: They are used to classify a resource. In nubbe[KG] nubbe:Bioactivity would be a class.</p> <p>Below is a table of all the data properties and their instances count in the dataset:</p>"},{"location":"extraction/","title":"Extraction process","text":""},{"location":"extraction/#extraction-process","title":"Extraction process","text":"<p>nubbeDB provided the data as postgresql database. We have transformed the data to json for better processing with our transformation tool. A schema was then created, leaning heavily on the provided data and personal experience with biological data. The schema will be improved regulary in cooperation with domain experts. For the transformation we use eccenca corporate memory</p> <p>The schema aswell as the dataset can be found at https://nubbekg.aksw.org/dataset/index.html</p>"},{"location":"improve/","title":"Improving","text":"<p>Requests and ideas for improvement are recorded here.</p>"},{"location":"improve/#current-dataset-issues","title":"Current dataset issues","text":"<ul> <li>The taxonomy data properties above phylum, aswell as the for the classyfire data are currently empty and will receive it's data in a future update.</li> </ul>"},{"location":"improve/#planned-future-updates","title":"Planned future updates","text":"<ul> <li>With the help of catalogueoflife, get the complete taxonomy tree off mostly all compounds in the dataset.</li> <li>With the help of classyfire, get the complete chemical classification off mostly all compounds in the dataset.</li> <li>Further improve the ontology with input from chemists and biologists.</li> </ul>"},{"location":"query/","title":"How to query","text":""},{"location":"query/#sparql-endpoint","title":"SPARQL endpoint","text":"<p>At https://nubbekg.aksw.org/sparql you will find the SPARQL endpoint for nubbekg. The backend is provided by OpenLink Virtuoso, while the frontend is provided by YASGUI.</p>"},{"location":"query/#rates-and-limitations","title":"Rates and limitations","text":"<p>You can make a limited number of connections. The settings can be seen below:</p> <pre><code>        ResultSetMaxRows           = 25000\n        MaxQueryExecutionTime      =   600  (seconds)\n        MaxQueryCostEstimationTime =   400  (seconds)\n        Connection limit           =    10  (parallel connections per IP address\n</code></pre> <p>ATTENTION: The result size is currently limited to 25000 rows. This way partial results are displayed as complete ones and there won't be a HTTP error.</p>"},{"location":"query/#sparql-example-queries","title":"SPARQL example queries","text":"<p>The following query gives you formula, name, weight and smile of a compound:</p> <pre><code>PREFIX nubbe:  &lt;http://nubbekg.aksw.org/ontology#&gt;\nPREFIX rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\nPREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX owl:  &lt;http://www.w3.org/2002/07/owl#&gt;\nPREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;\n\nSELECT DISTINCT ?formula ?name ?smiles ?weight WHERE {\n\n?compound a nubbe:Compound .\n?compound nubbe:molecularFormula ?formula .\n?compound nubbe:commonName ?name .\n?compound nubbe:smiles ?smiles .\n\n?compound nubbe:hasDescriptors ?descr .\n?molecdescr rdfs:subClassOf ?descr .\n?molecdescr nubbe:molecularWeight ?weight .}\n\nLIMIT 100\n</code></pre> <p>The following query gives you formula and weight of a compound where the weight is between 320.00 and 320.20:</p> <pre><code>PREFIX nubbe:  &lt;http://nubbekg.aksw.org/ontology#&gt;\nPREFIX rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\nPREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\nPREFIX owl:  &lt;http://www.w3.org/2002/07/owl#&gt;\nPREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;\n\nSELECT DISTINCT ?formula ?name ?smiles ?weight WHERE {\n\n?compound a nubbe:Compound .\n?compound nubbe:molecularFormula ?formula .\n\n?compound nubbe:hasDescriptors ?descr .\n?molecdescr rdfs:subClassOf ?descr .\n?molecdescr nubbe:molecularWeight ?weight .\n\nFILTER (?weight &gt; 320.00 &amp;&amp; ?weight &lt; 340.00) .\n}\nLIMIT 100\n</code></pre> <p>It is also possible to query without YASGUI, but with a self written script that connects to our endpoint. Below is a example in python with SPARQLWrapper:</p> <pre><code>from SPARQLWrapper import SPARQLWrapper, JSON\n\nsparql = SPARQLWrapper(\n    \"https://nubbekg.aksw.org/sparql\"\n)\nsparql.setReturnFormat(JSON)\n\nsparql.setQuery(\n    \"\"\"\n    PREFIX nubbe:  &lt;http://nubbekg.aksw.org/ontology#&gt;\n    PREFIX rdf:  &lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt;\n    PREFIX rdfs: &lt;http://www.w3.org/2000/01/rdf-schema#&gt;\n    PREFIX owl:  &lt;http://www.w3.org/2002/07/owl#&gt;\n    PREFIX xsd:  &lt;http://www.w3.org/2001/XMLSchema#&gt;\n\n    SELECT DISTINCT ?formula ?name ?smiles ?species ?city ?exinfo WHERE {\n\n    ?compound a nubbe:Compound .\n    ?compound nubbe:molecularFormula ?formula .\n    ?compound nubbe:commonName ?name .\n    ?compound nubbe:smiles ?smiles .\n\n    ?compound nubbe:hasIsolationData ?isolation .\n    ?isolation nubbe:obtentionMethod ?exinfo .\n    ?isolation nubbe:city ?city .\n\n    ?compound nubbe:isClassifiedBy ?taxa .\n    ?taxa nubbe:species ?species .}\n\n    LIMIT 10\n    \"\"\"\n)\n\ntry:\n    ret = sparql.queryAndConvert()\n\n    for r in ret[\"results\"][\"bindings\"]:\n        print(r)\nexcept Exception as e:\n    print(e)\n</code></pre> <p>You can check out a real simple tutorial for SPARQL here:</p>"}]}